// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Million.PropertiesService.Persistance;

#nullable disable

namespace Million.PropertiesService.Persistance.Migrations
{
    [DbContext(typeof(PropertiesDbContext))]
    [Migration("20250908042952_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Million.PropertiesService.Domain.Owners.Entities.Owner", b =>
                {
                    b.Property<Guid>("IdOwner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdOwner");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Owners_Name");

                    b.ToTable("Owners", "dbo");
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.Property", b =>
                {
                    b.Property<Guid>("IdProperty")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeInternal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOwner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdProperty");

                    b.HasIndex("IdOwner");

                    b.ToTable("Properties", "dbo");
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("IdPropertyImage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("IdProperty")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPropertyImage");

                    b.HasIndex("IdProperty")
                        .HasDatabaseName("IX_PropertyImages_IdProperty");

                    b.HasIndex("IdProperty", "Enabled")
                        .HasDatabaseName("IX_PropertyImages_IdProperty_Enabled");

                    b.ToTable("PropertyImages", "dbo");
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.PropertyTrace", b =>
                {
                    b.Property<Guid>("IdPropertyTrace")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProperty")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("IdPropertyTrace");

                    b.HasIndex("DateSale")
                        .HasDatabaseName("IX_PropertyTraces_DateSale");

                    b.HasIndex("IdProperty")
                        .HasDatabaseName("IX_PropertyTraces_IdProperty");

                    b.HasIndex("IdProperty", "DateSale")
                        .HasDatabaseName("IX_PropertyTraces_IdProperty_DateSale");

                    b.ToTable("PropertyTraces", "dbo");
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Owners.Entities.Owner", b =>
                {
                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.DateOfBirth", "DateOfBirth", b1 =>
                        {
                            b1.Property<Guid>("OwnerIdOwner")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("date")
                                .HasColumnName("DateOfBirth");

                            b1.HasKey("OwnerIdOwner");

                            b1.ToTable("Owners", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("OwnerIdOwner");
                        });

                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OwnerIdOwner")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Street");

                            b1.HasKey("OwnerIdOwner");

                            b1.ToTable("Owners", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("OwnerIdOwner");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("DateOfBirth")
                        .IsRequired();
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.Property", b =>
                {
                    b.HasOne("Million.PropertiesService.Domain.Owners.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PropertyIdProperty")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Street");

                            b1.HasKey("PropertyIdProperty");

                            b1.ToTable("Properties", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PropertyIdProperty");
                        });

                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PropertyIdProperty")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("PropertyIdProperty");

                            b1.ToTable("Properties", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PropertyIdProperty");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.PropertyImage", b =>
                {
                    b.HasOne("Million.PropertiesService.Domain.Properties.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Million.PropertiesService.Domain.Properties.Entities.PropertyTrace", b =>
                {
                    b.HasOne("Million.PropertiesService.Domain.Properties.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<Guid>("PropertyTraceIdPropertyTrace")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TaxAmountCurrency");

                            b1.HasKey("PropertyTraceIdPropertyTrace");

                            b1.ToTable("PropertyTraces", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PropertyTraceIdPropertyTrace");
                        });

                    b.OwnsOne("Million.PropertiesService.Domain.Common.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("PropertyTraceIdPropertyTrace")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Value");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ValueCurrency");

                            b1.HasKey("PropertyTraceIdPropertyTrace");

                            b1.ToTable("PropertyTraces", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PropertyTraceIdPropertyTrace");
                        });

                    b.Navigation("TaxAmount")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
